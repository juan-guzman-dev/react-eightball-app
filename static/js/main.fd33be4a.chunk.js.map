{"version":3,"sources":["EightBall.js","App.js","reportWebVitals.js","index.js"],"names":["EightBall","props","useState","msg","setMsg","color","setColor","greenCount","setGreenCount","redCount","setRedCount","goldenrodCount","setGoldenrodCount","Fragment","className","onClick","arr","answers","Math","floor","random","length","style","backgroundColor","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAQA,SAASA,EAAUC,GAAQ,IAAD,EACFC,mBAAS,wBADP,mBACjBC,EADiB,KACZC,EADY,OAEEF,mBAAS,SAFX,mBAEjBG,EAFiB,KAEVC,EAFU,OAGYJ,mBAAS,GAHrB,mBAGjBK,EAHiB,KAGLC,EAHK,OAIQN,mBAAS,GAJjB,mBAIjBO,EAJiB,KAIPC,EAJO,OAKoBR,mBAAS,GAL7B,mBAKjBS,EALiB,KAKDC,EALC,KAyBxB,OACE,eAAC,IAAMC,SAAP,WACE,8CACA,qGACA,qBACEC,UAAU,YACVC,QAxBN,WAAwB,IAZVC,EAYS,GAZTA,EAakBf,EAAMgB,SAZpBC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,SAYvClB,EADa,EACbA,IAAKE,EADQ,EACRA,MACbD,EAAOD,GACPG,EAASD,GACK,UAAVA,GAAmBG,EAAcD,EAAa,GACpC,QAAVF,GAAiBK,EAAYD,EAAW,GAC9B,cAAVJ,GAAuBO,EAAkBD,EAAiB,IAmB1DW,MAAO,CAAEC,gBAAiBlB,GAH5B,SAKE,4BAAIF,MAEN,gCACE,oBAAGmB,MAAO,CAAEjB,MAAO,SAAnB,0BAA4CE,KAC5C,oBAAGe,MAAO,CAAEjB,MAAO,OAAnB,wBAAwCI,KACxC,oBAAGa,MAAO,CAAEjB,MAAO,aAAnB,8BAAoDM,QAEtD,wBAAQI,QAzBI,WACdX,EAAO,wBACPE,EAAS,SACTE,EAAc,GACdE,EAAY,GACZE,EAAkB,IAoBhB,yBAKNZ,EAAUwB,aAAe,CACvBP,QAAS,CACP,CAAEd,IAAK,iBAAkBE,MAAO,SAChC,CAAEF,IAAK,sBAAuBE,MAAO,SACrC,CAAEF,IAAK,mBAAoBE,MAAO,SAClC,CAAEF,IAAK,oBAAqBE,MAAO,SACnC,CAAEF,IAAK,sBAAuBE,MAAO,SACrC,CAAEF,IAAK,oBAAqBE,MAAO,SACnC,CAAEF,IAAK,eAAgBE,MAAO,SAC9B,CAAEF,IAAK,gBAAiBE,MAAO,SAC/B,CAAEF,IAAK,OAAQE,MAAO,SACtB,CAAEF,IAAK,sBAAuBE,MAAO,aACrC,CAAEF,IAAK,yBAA0BE,MAAO,aACxC,CAAEF,IAAK,mBAAoBE,MAAO,aAClC,CAAEF,IAAK,2BAA4BE,MAAO,aAC1C,CAAEF,IAAK,sBAAuBE,MAAO,aACrC,CAAEF,IAAK,6BAA8BE,MAAO,aAC5C,CAAEF,IAAK,qBAAsBE,MAAO,OACpC,CAAEF,IAAK,kBAAmBE,MAAO,OACjC,CAAEF,IAAK,qBAAsBE,MAAO,OACpC,CAAEF,IAAK,uBAAwBE,MAAO,OACtC,CAAEF,IAAK,iBAAkBE,MAAO,SAIrBL,QCnEAyB,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCKSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.fd33be4a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./EightBall.css\";\n\nfunction choice(arr) {\n  const randomIdx = Math.floor(Math.random() * arr.length);\n  return arr[randomIdx];\n}\n\nfunction EightBall(props) {\n  const [msg, setMsg] = useState(\"Think of a Question.\");\n  const [color, setColor] = useState(\"black\");\n  const [greenCount, setGreenCount] = useState(0);\n  const [redCount, setRedCount] = useState(0);\n  const [goldenrodCount, setGoldenrodCount] = useState(0);\n\n  function handleClick() {\n    const { msg, color } = choice(props.answers);\n    setMsg(msg);\n    setColor(color);\n    if (color === \"green\") setGreenCount(greenCount + 1)\n    if (color === \"red\") setRedCount(redCount + 1)\n    if (color === \"goldenrod\") setGoldenrodCount(goldenrodCount + 1)\n  }\n\n  const restart = () => {\n    setMsg(\"Think of a Question.\")\n    setColor(\"black\")\n    setGreenCount(0)\n    setRedCount(0)\n    setGoldenrodCount(0)\n  }\n\n\n  return (\n    <React.Fragment>\n      <h1>Magic 8-Ball</h1>\n      <p>Think of a Question. Then click on the ball to see a random message.</p>\n      <div\n        className=\"EightBall\"\n        onClick={handleClick}\n        style={{ backgroundColor: color }}\n      >\n        <b>{msg}</b>\n      </div>\n      <div>\n        <p style={{ color: \"green\" }}>Green count: {greenCount}</p>\n        <p style={{ color: \"red\" }}>Red count: {redCount}</p>\n        <p style={{ color: \"goldenrod\" }}>Goldenrod count: {goldenrodCount}</p>\n      </div>\n      <button onClick={restart}>New Game</button>\n    </React.Fragment>\n  );\n}\n\nEightBall.defaultProps = {\n  answers: [\n    { msg: \"It is certain.\", color: \"green\" },\n    { msg: \"It is decidedly so.\", color: \"green\" },\n    { msg: \"Without a doubt.\", color: \"green\" },\n    { msg: \"Yes - definitely.\", color: \"green\" },\n    { msg: \"You may rely on it.\", color: \"green\" },\n    { msg: \"As I see it, yes.\", color: \"green\" },\n    { msg: \"Most likely.\", color: \"green\" },\n    { msg: \"Outlook good.\", color: \"green\" },\n    { msg: \"Yes.\", color: \"green\" },\n    { msg: \"Signs point to yes.\", color: \"goldenrod\" },\n    { msg: \"Reply hazy, try again.\", color: \"goldenrod\" },\n    { msg: \"Ask again later.\", color: \"goldenrod\" },\n    { msg: \"Better not tell you now.\", color: \"goldenrod\" },\n    { msg: \"Cannot predict now.\", color: \"goldenrod\" },\n    { msg: \"Concentrate and ask again.\", color: \"goldenrod\" },\n    { msg: \"Don't count on it.\", color: \"red\" },\n    { msg: \"My reply is no.\", color: \"red\" },\n    { msg: \"My sources say no.\", color: \"red\" },\n    { msg: \"Outlook not so good.\", color: \"red\" },\n    { msg: \"Very doubtful.\", color: \"red\" }\n  ]\n};\n\nexport default EightBall;\n","import React from \"react\";\nimport \"./App.css\";\nimport EightBall from \"./EightBall\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EightBall />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}